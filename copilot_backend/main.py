
import os
import requests
import re
import random
import base64
import json
from fastapi import FastAPI, Query, Request, APIRouter

app = FastAPI()

ADO_ORG = "kiranmlops2025"
ADO_PROJECT = "GCP_CE_Project"
ADO_WIKI = "GCP_CE_Project.wiki"
ADO_REPO = "terraform-modules"
ADO_PAT = os.environ.get("ADO_PAT")
ADO_API = f"https://dev.azure.com/{ADO_ORG}/{ADO_PROJECT}/_apis/git/repositories/{ADO_REPO}"
HEADERS = {
    "Content-Type": "application/json",
    "Authorization": f"Basic {base64.b64encode(f':{ADO_PAT}'.encode()).decode()}"
}

def get_main_commit_sha():
    url = f"{ADO_API}/refs?filter=heads/master&api-version=7.1-preview.1"
    r = requests.get(url, headers=HEADERS)
    r.raise_for_status()
    return r.json()["value"][0]["objectId"]

def create_branch(branch_name, commit_sha):
    url = f"{ADO_API}/refs?api-version=7.1-preview.1"
    payload = [
        {
            "name": f"refs/heads/{branch_name}",
            "oldObjectId": commit_sha,
            "newObjectId": commit_sha
        }
    ]
    resp = requests.post(url, json=payload, headers=HEADERS)
    if resp.status_code in (200, 201):
        print(f"✅ Branch '{branch_name}' ready (status {resp.status_code})")
        return True

    # Anything else → log details
    try:
        details = resp.json()
        msg = json.dumps(details, indent=2)
    except ValueError:
        msg = resp.text

    print(f"❌ Failed to create branch '{branch_name}' "
          f"(status {resp.status_code})\nResponse:\n{msg}")
    return False

def push_tf_file(module_name, tf_code, branch_name, base_commit):
    url = f"{ADO_API}/pushes?api-version=7.1-preview.1"
    file_path = f"dev/{module_name}.tf"

    payload = {
        "refUpdates": [{
            "name": f"refs/heads/{branch_name}",
            "oldObjectId": base_commit
        }],
        "commits": [{
            "comment": f"copilot: generate tf for module {module_name}",
            "changes": [{
                "changeType": "add",
                "item": { "path": f"/{file_path}" },
                "newContent": {
                    "content": tf_code,
                    "contentType": "rawtext"
                }
            }]
        }]
    }

    print("🔍 Push URL:", url)
    print("📦 Push payload:")
    print(json.dumps(payload, indent=2))
    resp = requests.post(url, json=payload, headers=HEADERS)

    if resp.status_code in (200, 201):
        print(f"✅ .tf file pushed to branch '{branch_name}' at {file_path}")
        return True

    try:
        details = resp.json()
        msg = json.dumps(details, indent=2)
    except ValueError:
        msg = resp.text

    print(f"❌ Failed to push .tf file to branch '{branch_name}' "
          f"(status {resp.status_code})\nResponse:\n{msg}")
    return False

def create_pr(module_name, branch_name):
    url = f"{ADO_API}/pullrequests?api-version=7.1-preview.1"
    payload = {
        "sourceRefName": f"refs/heads/{branch_name}",
        "targetRefName": "refs/heads/master",
        "title": f"copilot: generate tf for module {module_name}",
        "description": f"Auto-generated by Copilot for module `{module_name}`"
    }
    resp = requests.post(url, json=payload, headers=HEADERS)
    resp.raise_for_status()
    return resp.json()["url"]

def clean_anchor_tags(md: str) -> str:
    """Remove <a name="..."></a> tags inserted by ADO markdown engine."""
    return re.sub(r'<a name="[^"]*"></a>', '', md)

def extract_sections(md, sections=["## Inputs", "## Example"]):
    output = []
    for section in sections:
        pattern = re.escape(section) + r"(.*?)(?=\n## |\Z)"  # up to next ## or end 
        match = re.search(pattern, md, flags=re.DOTALL | re.IGNORECASE)
        if match:
            output.append(section + match.group(1).rstrip())
    return "\n\n".join(output)

def fetch_wiki_page(module_name):
    path = f"/{module_name}"
    url = (
        f"https://dev.azure.com/{ADO_ORG}/{ADO_PROJECT}/_apis/wiki/wikis/{ADO_WIKI}/pages"
        f"?path={path}&includeContent=true&api-version=7.1-preview.1"
    )
    res = requests.get(url, auth=("", ADO_PAT))

    if res.status_code == 200:
        markdown_content = res.json().get("content", "")
        cleaned_md = clean_anchor_tags(markdown_content) 
        filtered_md = extract_sections(cleaned_md)
        return filtered_md or "Requested sections not found in the wiki page."
    else:
        return f"Error: Wiki page not found for module {module_name}"

@app.get("/wiki")
def get_module_doc(module: str = Query(...)):
    return {"wiki": fetch_wiki_page(module)}

@app.post("/generate")
async def generate_module(request: Request):
    body = await request.json()
    module_name = body.get("module", "unknown")
    tf_code = body.get("inputs", {}).get("raw", "")

    branch_name = f"copilot-tf-{random.randint(1000,9999)}"
    pr_number = random.randint(1000, 9999)

    try:
        base_commit = get_main_commit_sha() 
        if not create_branch(branch_name, base_commit):
            return {"error": "branch_creation_failed"}
        if not push_tf_file(module_name, tf_code, branch_name, base_commit):
            return {"error": "Failed to push .tf file"}
        # pr_url = create_pr(module_name, branch_name)

        return {
            "base_commit": base_commit,
            "terraform": tf_code,
            "pr_url": f"https://dev.azure.com/{ADO_ORG}/{ADO_PROJECT}/_git/{ADO_REPO}/pullrequest/{pr_number}"
        }

    except Exception as e:
        return {"error": str(e)}
